"""
Tariff Intelligence Agent for ATLAS Enterprise
Advanced agentic framework for automated data analysis and decision-making.
"""

import asyncio
import json
import sqlite3
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Tuple
import pandas as pd
import numpy as np
from dataclasses import dataclass
from enum import Enum
import logging
import httpx
from pathlib import Path

# ML and AI libraries
from sklearn.ensemble import RandomForestRegressor, IsolationForest
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error
import joblib

# Import our services
import sys
sys.path.append(str(Path(__file__).parent.parent))
from services.enhanced_exchange_rate_service import EnhancedExchangeRateService
from services.tariff_scraper_service import TariffScraperService

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class AgentRole(Enum):
    """Define different agent roles in the system."""
    DATA_COLLECTOR = "data_collector"
    ANALYST = "analyst"
    PREDICTOR = "predictor"
    OPTIMIZER = "optimizer"
    MONITOR = "monitor"
    COORDINATOR = "coordinator"


class Priority(Enum):
    """Task priority levels."""
    LOW = 1
    MEDIUM = 2
    HIGH = 3
    CRITICAL = 4


@dataclass
class AgentTask:
    """Represents a task for an agent."""
    id: str
    agent_role: AgentRole
    task_type: str
    data: Dict[str, Any]
    priority: Priority
    created_at: datetime
    deadline: Optional[datetime] = None
    status: str = "pending"
    result: Optional[Dict[str, Any]] = None
    error: Optional[str] = None


@dataclass
class TariffInsight:
    """Represents an insight generated by the agent."""
    insight_type: str
    hts_code: str
    confidence: float
    message: str
    data: Dict[str, Any]
    impact_level: str
    recommendations: List[str]
    generated_at: datetime


class TariffIntelligenceAgent:
    """
    Main intelligence agent that coordinates multiple specialized agents for:
    - Automated data collection and validation
    - Predictive analytics and forecasting
    - Risk assessment and opportunity identification
    - Real-time decision support
    - Continuous learning and optimization
    """
    
    def __init__(self, db_path: str = "agent_intelligence.db"):
        """Initialize the Tariff Intelligence Agent."""
        self.db_path = db_path
        self.exchange_service = EnhancedExchangeRateService()
        self.scraper_service = TariffScraperService()
        
        # Agent state
        self.agents = {}
        self.task_queue = []
        self.active_tasks = {}
        self.insights_cache = []
        
        # ML Models
        self.models = {}
        self.scalers = {}
        
        # Initialize database and agents
        self._init_database()
        self._initialize_agents()
        
        # Start the agent orchestration loop
        self._start_agent_loop()
    
    def _init_database(self):
        """Initialize database for agent intelligence."""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # Agent tasks table
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS agent_tasks (
                    id TEXT PRIMARY KEY,
                    agent_role TEXT NOT NULL,
                    task_type TEXT NOT NULL,
                    data TEXT,
                    priority INTEGER,
                    status TEXT,
                    created_at DATETIME,
                    completed_at DATETIME,
                    result TEXT,
                    error TEXT
                )
            """)
            
            # Insights table
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS tariff_insights (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    insight_type TEXT NOT NULL,
                    hts_code TEXT,
                    confidence REAL,
                    message TEXT,
                    data TEXT,
                    impact_level TEXT,
                    recommendations TEXT,
                    generated_at DATETIME
                )
            """)
            
            # Learning feedback table
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS learning_feedback (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    insight_id INTEGER,
                    user_feedback TEXT,
                    accuracy_score REAL,
                    feedback_type TEXT,
                    created_at DATETIME,
                    FOREIGN KEY (insight_id) REFERENCES tariff_insights (id)
                )
            """)
            
            # Model performance table
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS model_performance (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    model_name TEXT NOT NULL,
                    model_version TEXT,
                    accuracy REAL,
                    mae REAL,
                    training_date DATETIME,
                    performance_data TEXT
                )
            """)
            
            conn.commit()
            conn.close()
            logger.info("✅ Agent intelligence database initialized")
            
        except Exception as e:
            logger.error(f"❌ Database initialization failed: {e}")
    
    def _initialize_agents(self):
        """Initialize specialized agents."""
        self.agents = {
            AgentRole.DATA_COLLECTOR: DataCollectorAgent(self),
            AgentRole.ANALYST: AnalystAgent(self),
            AgentRole.PREDICTOR: PredictorAgent(self),
            AgentRole.OPTIMIZER: OptimizerAgent(self),
            AgentRole.MONITOR: MonitorAgent(self),
            AgentRole.COORDINATOR: CoordinatorAgent(self)
        }
        logger.info("✅ Specialized agents initialized")
    
    def _start_agent_loop(self):
        """Start the main agent orchestration loop."""
        import threading
        
        def agent_loop():
            asyncio.set_event_loop(asyncio.new_event_loop())
            loop = asyncio.get_event_loop()
            loop.run_until_complete(self._agent_orchestration_loop())
        
        agent_thread = threading.Thread(target=agent_loop, daemon=True)
        agent_thread.start()
        logger.info("✅ Agent orchestration loop started")
    
    async def _agent_orchestration_loop(self):
        """Main orchestration loop for agent coordination."""
        while True:
            try:
                # Process pending tasks
                await self._process_task_queue()
                
                # Check for new opportunities
                await self._discover_opportunities()
                
                # Update models if needed
                await self._update_models()
                
                # Generate insights
                await self._generate_insights()
                
                # Sleep for a bit before next cycle
                await asyncio.sleep(60)  # Run every minute
                
            except Exception as e:
                logger.error(f"❌ Agent orchestration error: {e}")
                await asyncio.sleep(300)  # Wait 5 minutes on error
    
    async def _process_task_queue(self):
        """Process pending tasks in the queue."""
        # Sort tasks by priority and deadline
        self.task_queue.sort(key=lambda x: (x.priority.value, x.created_at), reverse=True)
        
        # Process high priority tasks first
        for task in self.task_queue[:5]:  # Process max 5 tasks per cycle
            if task.status == "pending":
                try:
                    agent = self.agents[task.agent_role]
                    task.status = "running"
                    self.active_tasks[task.id] = task
                    
                    # Execute task
                    result = await agent.execute_task(task)
                    task.result = result
                    task.status = "completed"
                    
                    # Store in database
                    await self._store_task_result(task)
                    
                    # Remove from active tasks
                    del self.active_tasks[task.id]
                    self.task_queue.remove(task)
                    
                except Exception as e:
                    task.error = str(e)
                    task.status = "failed"
                    logger.error(f"❌ Task {task.id} failed: {e}")
    
    async def _discover_opportunities(self):
        """Discover new opportunities for analysis and optimization."""
        try:
            # Check for currency volatility opportunities
            coordinator = self.agents[AgentRole.COORDINATOR]
            await coordinator.discover_currency_opportunities()
            
            # Check for tariff arbitrage opportunities
            await coordinator.discover_tariff_arbitrage()
            
            # Check for compliance risks
            await coordinator.discover_compliance_risks()
            
        except Exception as e:
            logger.error(f"❌ Opportunity discovery failed: {e}")
    
    async def add_task(self, agent_role: AgentRole, task_type: str, data: Dict[str, Any], 
                      priority: Priority = Priority.MEDIUM) -> str:
        """Add a new task to the agent queue."""
        task_id = f"{agent_role.value}_{task_type}_{datetime.now().timestamp()}"
        
        task = AgentTask(
            id=task_id,
            agent_role=agent_role,
            task_type=task_type,
            data=data,
            priority=priority,
            created_at=datetime.now()
        )
        
        self.task_queue.append(task)
        logger.info(f"✅ Added task {task_id} to queue")
        return task_id
    
    async def get_intelligent_tariff_analysis(self, hts_code: str, 
                                            value: float, 
                                            origin_country: str,
                                            currency: str = "USD") -> Dict[str, Any]:
        """Get comprehensive intelligent analysis for a tariff calculation."""
        try:
            # Collect current data
            task_id = await self.add_task(
                AgentRole.DATA_COLLECTOR,
                "collect_comprehensive_data",
                {
                    "hts_code": hts_code,
                    "origin_country": origin_country,
                    "value": value,
                    "currency": currency
                },
                Priority.HIGH
            )
            
            # Wait for data collection (simplified for demo)
            await asyncio.sleep(2)
            
            # Analyze data
            analyst_task_id = await self.add_task(
                AgentRole.ANALYST,
                "analyze_tariff_scenario",
                {
                    "hts_code": hts_code,
                    "origin_country": origin_country,
                    "value": value,
                    "currency": currency
                },
                Priority.HIGH
            )
            
            # Generate predictions
            predictor_task_id = await self.add_task(
                AgentRole.PREDICTOR,
                "predict_tariff_trends",
                {
                    "hts_code": hts_code,
                    "origin_country": origin_country,
                    "timeframe": "3_months"
                },
                Priority.MEDIUM
            )
            
            # Find optimizations
            optimizer_task_id = await self.add_task(
                AgentRole.OPTIMIZER,
                "find_cost_optimizations",
                {
                    "hts_code": hts_code,
                    "current_cost": value,
                    "currency": currency
                },
                Priority.MEDIUM
            )
            
            # Return immediate analysis while tasks are processing
            return {
                "analysis_id": f"analysis_{datetime.now().timestamp()}",
                "hts_code": hts_code,
                "status": "processing",
                "tasks": {
                    "data_collection": task_id,
                    "analysis": analyst_task_id,
                    "prediction": predictor_task_id,
                    "optimization": optimizer_task_id
                },
                "estimated_completion": (datetime.now() + timedelta(minutes=5)).isoformat(),
                "preliminary_insights": await self._get_preliminary_insights(hts_code, origin_country)
            }
            
        except Exception as e:
            logger.error(f"❌ Intelligent analysis failed: {e}")
            return {"error": str(e)}
    
    async def _get_preliminary_insights(self, hts_code: str, origin_country: str) -> List[Dict[str, Any]]:
        """Get preliminary insights while detailed analysis is processing."""
        insights = []
        
        try:
            # Quick currency analysis
            if origin_country != "US":
                currency_data = await self.exchange_service.get_exchange_rate_with_confidence(
                    "USD", self._get_country_currency(origin_country)
                )
                
                if currency_data["confidence"] > 0.8:
                    insights.append({
                        "type": "currency_stability",
                        "message": f"Currency exchange rate is stable with {currency_data['confidence']:.1%} confidence",
                        "impact": "low",
                        "data": currency_data
                    })
                else:
                    insights.append({
                        "type": "currency_volatility",
                        "message": f"Currency shows volatility (confidence: {currency_data['confidence']:.1%})",
                        "impact": "medium",
                        "recommendation": "Consider hedging currency risk"
                    })
            
            # Quick tariff lookup
            tariff_data = await self.scraper_service.get_latest_tariff_data(hts_code)
            if tariff_data:
                insights.append({
                    "type": "tariff_data_available",
                    "message": f"Found {len(tariff_data)} recent tariff records",
                    "impact": "info"
                })
            
            return insights
            
        except Exception as e:
            logger.error(f"❌ Preliminary insights failed: {e}")
            return []
    
    def _get_country_currency(self, country_code: str) -> str:
        """Get currency code for a country."""
        currency_map = {
            "CN": "CNY", "CA": "CAD", "GB": "GBP", "JP": "JPY",
            "DE": "EUR", "FR": "EUR", "IT": "EUR", "ES": "EUR",
            "AU": "AUD", "IN": "INR", "KR": "KRW", "MX": "MXN"
        }
        return currency_map.get(country_code, "USD")
    
    async def _store_task_result(self, task: AgentTask):
        """Store task result in database."""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute("""
                INSERT INTO agent_tasks 
                (id, agent_role, task_type, data, priority, status, created_at, completed_at, result, error) 
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                task.id, task.agent_role.value, task.task_type,
                json.dumps(task.data), task.priority.value, task.status,
                task.created_at, datetime.now(),
                json.dumps(task.result) if task.result else None,
                task.error
            ))
            
            conn.commit()
            conn.close()
            
        except Exception as e:
            logger.error(f"Failed to store task result: {e}")
    
    async def get_agent_performance_report(self) -> Dict[str, Any]:
        """Generate performance report for all agents."""
        try:
            conn = sqlite3.connect(self.db_path)
            
            # Get task statistics
            task_stats = pd.read_sql_query("""
                SELECT agent_role, status, COUNT(*) as count 
                FROM agent_tasks 
                WHERE created_at >= datetime('now', '-7 days')
                GROUP BY agent_role, status
            """, conn)
            
            # Get insight statistics
            insight_stats = pd.read_sql_query("""
                SELECT insight_type, COUNT(*) as count, AVG(confidence) as avg_confidence
                FROM tariff_insights 
                WHERE generated_at >= datetime('now', '-7 days')
                GROUP BY insight_type
            """, conn)
            
            conn.close()
            
            return {
                "status": "healthy",
                "active_agents": len(self.agents),
                "queue_size": len(self.task_queue),
                "active_tasks": len(self.active_tasks),
                "task_statistics": task_stats.to_dict('records'),
                "insight_statistics": insight_stats.to_dict('records'),
                "uptime": "continuous",
                "last_update": datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"Performance report failed: {e}")
            return {"status": "error", "error": str(e)}


class BaseAgent:
    """Base class for specialized agents."""
    
    def __init__(self, intelligence_agent):
        self.intelligence_agent = intelligence_agent
        self.role = None
    
    async def execute_task(self, task: AgentTask) -> Dict[str, Any]:
        """Execute a task - to be implemented by subclasses."""
        raise NotImplementedError


class DataCollectorAgent(BaseAgent):
    """Agent specialized in data collection and validation."""
    
    def __init__(self, intelligence_agent):
        super().__init__(intelligence_agent)
        self.role = AgentRole.DATA_COLLECTOR
    
    async def execute_task(self, task: AgentTask) -> Dict[str, Any]:
        """Execute data collection tasks."""
        try:
            if task.task_type == "collect_comprehensive_data":
                return await self._collect_comprehensive_data(task.data)
            elif task.task_type == "validate_data_sources":
                return await self._validate_data_sources(task.data)
            elif task.task_type == "update_historical_data":
                return await self._update_historical_data(task.data)
            else:
                return {"error": f"Unknown task type: {task.task_type}"}
                
        except Exception as e:
            return {"error": str(e)}
    
    async def _collect_comprehensive_data(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """Collect comprehensive data for analysis."""
        hts_code = data.get("hts_code")
        origin_country = data.get("origin_country")
        
        collected_data = {
            "hts_code": hts_code,
            "collection_timestamp": datetime.now().isoformat()
        }
        
        # Collect tariff data
        tariff_data = await self.intelligence_agent.scraper_service.get_latest_tariff_data(hts_code, origin_country)
        collected_data["tariff_data"] = tariff_data
        
        # Collect currency data
        currency = self.intelligence_agent._get_country_currency(origin_country)
        currency_data = await self.intelligence_agent.exchange_service.get_exchange_rate_with_confidence("USD", currency)
        collected_data["currency_data"] = currency_data
        
        # Collect historical patterns
        historical_data = await self.intelligence_agent.exchange_service.get_historical_data("USD", currency, days=90)
        collected_data["historical_exchange"] = historical_data.to_dict('records') if not historical_data.empty else []
        
        return collected_data


class AnalystAgent(BaseAgent):
    """Agent specialized in data analysis and pattern recognition."""
    
    def __init__(self, intelligence_agent):
        super().__init__(intelligence_agent)
        self.role = AgentRole.ANALYST
    
    async def execute_task(self, task: AgentTask) -> Dict[str, Any]:
        """Execute analysis tasks."""
        try:
            if task.task_type == "analyze_tariff_scenario":
                return await self._analyze_tariff_scenario(task.data)
            elif task.task_type == "identify_patterns":
                return await self._identify_patterns(task.data)
            elif task.task_type == "risk_assessment":
                return await self._assess_risks(task.data)
            else:
                return {"error": f"Unknown task type: {task.task_type}"}
                
        except Exception as e:
            return {"error": str(e)}
    
    async def _analyze_tariff_scenario(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """Analyze a specific tariff scenario."""
        analysis = {
            "scenario": data,
            "analysis_timestamp": datetime.now().isoformat(),
            "findings": []
        }
        
        # Cost analysis
        base_cost = data.get("value", 0)
        if base_cost > 10000:
            analysis["findings"].append({
                "type": "high_value_alert",
                "message": "High-value shipment - consider duty optimization strategies",
                "impact": "medium"
            })
        
        # Country-specific analysis
        origin_country = data.get("origin_country")
        if origin_country in ["CN", "RU"]:
            analysis["findings"].append({
                "type": "trade_policy_alert",
                "message": "Origin country may be subject to additional trade restrictions",
                "impact": "high",
                "recommendation": "Verify current trade policies and restrictions"
            })
        
        return analysis


class PredictorAgent(BaseAgent):
    """Agent specialized in predictive analytics and forecasting."""
    
    def __init__(self, intelligence_agent):
        super().__init__(intelligence_agent)
        self.role = AgentRole.PREDICTOR
    
    async def execute_task(self, task: AgentTask) -> Dict[str, Any]:
        """Execute prediction tasks."""
        try:
            if task.task_type == "predict_tariff_trends":
                return await self._predict_tariff_trends(task.data)
            elif task.task_type == "forecast_currency_movement":
                return await self._forecast_currency_movement(task.data)
            elif task.task_type == "predict_policy_changes":
                return await self._predict_policy_changes(task.data)
            else:
                return {"error": f"Unknown task type: {task.task_type}"}
                
        except Exception as e:
            return {"error": str(e)}
    
    async def _predict_tariff_trends(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """Predict tariff trends using ML models."""
        hts_code = data.get("hts_code")
        origin_country = data.get("origin_country")
        
        # Get currency prediction
        currency = self.intelligence_agent._get_country_currency(origin_country)
        currency_prediction = await self.intelligence_agent.exchange_service.predict_exchange_rate(
            "USD", currency, days_ahead=90
        )
        
        prediction = {
            "hts_code": hts_code,
            "prediction_timestamp": datetime.now().isoformat(),
            "currency_forecast": currency_prediction,
            "tariff_trend_prediction": {
                "trend": "stable",  # Simplified
                "confidence": 0.7,
                "factors": ["historical_patterns", "current_policy"]
            }
        }
        
        return prediction


class OptimizerAgent(BaseAgent):
    """Agent specialized in cost optimization and strategy recommendations."""
    
    def __init__(self, intelligence_agent):
        super().__init__(intelligence_agent)
        self.role = AgentRole.OPTIMIZER
    
    async def execute_task(self, task: AgentTask) -> Dict[str, Any]:
        """Execute optimization tasks."""
        try:
            if task.task_type == "find_cost_optimizations":
                return await self._find_cost_optimizations(task.data)
            elif task.task_type == "optimize_sourcing":
                return await self._optimize_sourcing(task.data)
            elif task.task_type == "optimize_timing":
                return await self._optimize_timing(task.data)
            else:
                return {"error": f"Unknown task type: {task.task_type}"}
                
        except Exception as e:
            return {"error": str(e)}
    
    async def _find_cost_optimizations(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """Find cost optimization opportunities."""
        optimizations = {
            "optimization_timestamp": datetime.now().isoformat(),
            "strategies": []
        }
        
        current_cost = data.get("current_cost", 0)
        
        # Currency hedging opportunities
        optimizations["strategies"].append({
            "type": "currency_hedging",
            "description": "Consider currency hedging to reduce exchange rate risk",
            "potential_savings": "5-15%",
            "complexity": "medium"
        })
        
        # Timing optimization
        optimizations["strategies"].append({
            "type": "timing_optimization",
            "description": "Optimize shipment timing based on currency forecasts",
            "potential_savings": "2-8%",
            "complexity": "low"
        })
        
        return optimizations


class MonitorAgent(BaseAgent):
    """Agent specialized in monitoring and alerting."""
    
    def __init__(self, intelligence_agent):
        super().__init__(intelligence_agent)
        self.role = AgentRole.MONITOR
    
    async def execute_task(self, task: AgentTask) -> Dict[str, Any]:
        """Execute monitoring tasks."""
        try:
            if task.task_type == "monitor_rate_changes":
                return await self._monitor_rate_changes(task.data)
            elif task.task_type == "monitor_policy_updates":
                return await self._monitor_policy_updates(task.data)
            else:
                return {"error": f"Unknown task type: {task.task_type}"}
                
        except Exception as e:
            return {"error": str(e)}
    
    async def _monitor_rate_changes(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """Monitor for significant rate changes."""
        # Implementation for monitoring rate changes
        return {
            "monitoring_active": True,
            "last_check": datetime.now().isoformat(),
            "alerts_generated": 0
        }


class CoordinatorAgent(BaseAgent):
    """Agent specialized in coordinating other agents and discovering opportunities."""
    
    def __init__(self, intelligence_agent):
        super().__init__(intelligence_agent)
        self.role = AgentRole.COORDINATOR
    
    async def execute_task(self, task: AgentTask) -> Dict[str, Any]:
        """Execute coordination tasks."""
        try:
            if task.task_type == "coordinate_analysis":
                return await self._coordinate_analysis(task.data)
            else:
                return {"error": f"Unknown task type: {task.task_type}"}
                
        except Exception as e:
            return {"error": str(e)}
    
    async def discover_currency_opportunities(self):
        """Discover currency arbitrage opportunities."""
        # Implementation for discovering opportunities
        pass
    
    async def discover_tariff_arbitrage(self):
        """Discover tariff arbitrage opportunities."""
        # Implementation for tariff arbitrage discovery
        pass
    
    async def discover_compliance_risks(self):
        """Discover potential compliance risks."""
        # Implementation for compliance risk discovery
        pass 