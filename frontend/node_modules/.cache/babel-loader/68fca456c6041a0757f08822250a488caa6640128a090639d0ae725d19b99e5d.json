{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor\napi.interceptors.request.use(config => {\n  var _config$method;\n  console.log('API Request:', (_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase(), config.url);\n  return config;\n}, error => {\n  console.error('API Request Error:', error);\n  return Promise.reject(error);\n});\n\n// Response interceptor\napi.interceptors.response.use(response => {\n  console.log('API Response:', response.status, response.config.url);\n  return response;\n}, error => {\n  var _error$response;\n  console.error('API Response Error:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status, error.message);\n  return Promise.reject(error);\n});\nexport const chatService = {\n  /**\r\n   * Send a message to the chat API\r\n   * @param {string} message - The message to send\r\n   * @param {string} sessionId - Optional session ID\r\n   * @returns {Promise<Object>} The response from the API\r\n   */\n  async sendMessage(message, sessionId = null) {\n    try {\n      const response = await api.post('/api/v1/chat/', {\n        message,\n        session_id: sessionId\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error sending message:', error);\n\n      // Handle different types of errors\n      if (error.response) {\n        var _error$response$data;\n        // Server responded with error status\n        throw new Error(((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Server error');\n      } else if (error.request) {\n        // Network error\n        throw new Error('Network error - please check your connection');\n      } else {\n        // Other error\n        throw new Error(error.message || 'Unknown error');\n      }\n    }\n  },\n  /**\r\n   * Get session information\r\n   * @param {string} sessionId - The session ID\r\n   * @returns {Promise<Object>} Session information\r\n   */\n  async getSessionInfo(sessionId) {\n    try {\n      const response = await api.get(`/api/v1/chat/session/${sessionId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error getting session info:', error);\n      throw error;\n    }\n  },\n  /**\r\n   * Clear a chat session\r\n   * @param {string} sessionId - The session ID\r\n   * @returns {Promise<Object>} Confirmation\r\n   */\n  async clearSession(sessionId) {\n    try {\n      const response = await api.delete(`/api/v1/chat/session/${sessionId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error clearing session:', error);\n      throw error;\n    }\n  },\n  /**\r\n   * Check API health\r\n   * @returns {Promise<Object>} Health status\r\n   */\n  async checkHealth() {\n    try {\n      const response = await api.get('/health');\n      return response.data;\n    } catch (error) {\n      console.error('Error checking health:', error);\n      throw error;\n    }\n  },\n  /**\r\n   * Check chat service health\r\n   * @returns {Promise<Object>} Chat service health\r\n   */\n  async checkChatHealth() {\n    try {\n      const response = await api.get('/api/v1/chat/health');\n      return response.data;\n    } catch (error) {\n      console.error('Error checking chat health:', error);\n      throw error;\n    }\n  }\n};\nexport default chatService;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","headers","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","error","Promise","reject","response","status","_error$response","message","chatService","sendMessage","sessionId","post","session_id","data","_error$response$data","Error","getSessionInfo","get","clearSession","delete","checkHealth","checkChatHealth"],"sources":["C:/Users/likhi/tariff-chatbot/frontend/src/services/chatService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\r\n\r\n// Create axios instance\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 30000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    console.log('API Request:', config.method?.toUpperCase(), config.url);\r\n    return config;\r\n  },\r\n  (error) => {\r\n    console.error('API Request Error:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    console.log('API Response:', response.status, response.config.url);\r\n    return response;\r\n  },\r\n  (error) => {\r\n    console.error('API Response Error:', error.response?.status, error.message);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport const chatService = {\r\n  /**\r\n   * Send a message to the chat API\r\n   * @param {string} message - The message to send\r\n   * @param {string} sessionId - Optional session ID\r\n   * @returns {Promise<Object>} The response from the API\r\n   */\r\n  async sendMessage(message, sessionId = null) {\r\n    try {\r\n      const response = await api.post('/api/v1/chat/', {\r\n        message,\r\n        session_id: sessionId,\r\n      });\r\n\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error sending message:', error);\r\n      \r\n      // Handle different types of errors\r\n      if (error.response) {\r\n        // Server responded with error status\r\n        throw new Error(error.response.data?.message || 'Server error');\r\n      } else if (error.request) {\r\n        // Network error\r\n        throw new Error('Network error - please check your connection');\r\n      } else {\r\n        // Other error\r\n        throw new Error(error.message || 'Unknown error');\r\n      }\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Get session information\r\n   * @param {string} sessionId - The session ID\r\n   * @returns {Promise<Object>} Session information\r\n   */\r\n  async getSessionInfo(sessionId) {\r\n    try {\r\n      const response = await api.get(`/api/v1/chat/session/${sessionId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error getting session info:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Clear a chat session\r\n   * @param {string} sessionId - The session ID\r\n   * @returns {Promise<Object>} Confirmation\r\n   */\r\n  async clearSession(sessionId) {\r\n    try {\r\n      const response = await api.delete(`/api/v1/chat/session/${sessionId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error clearing session:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Check API health\r\n   * @returns {Promise<Object>} Health status\r\n   */\r\n  async checkHealth() {\r\n    try {\r\n      const response = await api.get('/health');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error checking health:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Check chat service health\r\n   * @returns {Promise<Object>} Chat service health\r\n   */\r\n  async checkChatHealth() {\r\n    try {\r\n      const response = await api.get('/api/v1/chat/health');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error checking chat health:', error);\r\n      throw error;\r\n    }\r\n  },\r\n};\r\n\r\nexport default chatService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}